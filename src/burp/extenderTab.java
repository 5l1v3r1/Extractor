/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package burp;

import java.awt.Component;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;


/**
 *
 * @author nbidron
 */
public class extenderTab extends javax.swing.JPanel {

    /**
     * Creates new form extenderTab
     */
    public extenderTab() {
        initComponents();
        //initData();
        JPropertyValue = new javax.swing.JTextField[10];
        JPropertyValue[0] = jPropertyValue01;
        JPropertyValue[1] = jPropertyValue02;
        JPropertyValue[2] = jPropertyValue03;
        JPropertyValue[3] = jPropertyValue04;
        JPropertyValue[4] = jPropertyValue05;
        JPropertyValue[5] = jPropertyValue06;
        JPropertyValue[6] = jPropertyValue07;
        JPropertyValue[7] = jPropertyValue08;
        JPropertyValue[8] = jPropertyValue09;
        JPropertyValue[9] = jPropertyValue10;
        
        JPropertyName = new javax.swing.JLabel[10];
        JPropertyName[0] = jPropertyName01;
        JPropertyName[1] = jPropertyName02;
        JPropertyName[2] = jPropertyName03;
        JPropertyName[3] = jPropertyName04;
        JPropertyName[4] = jPropertyName05;
        JPropertyName[5] = jPropertyName06;
        JPropertyName[6] = jPropertyName07;
        JPropertyName[7] = jPropertyName08;
        JPropertyName[8] = jPropertyName09;
        JPropertyName[9] = jPropertyName10;
        
        for(int i = 0; i < JPropertyValue.length; ++i) {
            JPropertyValue[i].addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyTyped(java.awt.event.KeyEvent evt) {
                    jPropertyValueKeyTyped(evt);
                }
                public void keyPressed(java.awt.event.KeyEvent evt) {
                    jPropertyValueKeyTyped(evt);
                }
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    jPropertyValueKeyTyped(evt);
                }
            });
        }
        for(int i = 0; i < JPropertyValue.length; ++i ) {
            JPropertyValue[i].setText("");
            JPropertyName[i].setText("Property:");
            JPropertyName[i].setEnabled(false);
            JPropertyValue[i].setEnabled(false);
            JPropertyName[i].setVisible(false);
            JPropertyValue[i].setVisible(false);
        }
        
        
        String[] listTypes = new String[Globals.nodes.length - 2]; //magic number here because there are 2 node types we don't want to display, might change in the future

        for(int i = listTypes.length - 1; i >= 0; --i) {
            listTypes[i] = Globals.nodes[i+2].name;
        }
        
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(listTypes));
    }
    
    private javax.swing.JTextField[] JPropertyValue;
    private javax.swing.JLabel[] JPropertyName;
    
    private void jPropertyValueKeyTyped(java.awt.event.KeyEvent evt) {
        updateNode();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPropertyValue01 = new javax.swing.JTextField();
        jPropertyValue02 = new javax.swing.JTextField();
        jPropertyValue03 = new javax.swing.JTextField();
        jPropertyValue04 = new javax.swing.JTextField();
        jPropertyValue05 = new javax.swing.JTextField();
        jPropertyValue06 = new javax.swing.JTextField();
        jPropertyValue07 = new javax.swing.JTextField();
        jPropertyValue08 = new javax.swing.JTextField();
        jPropertyValue09 = new javax.swing.JTextField();
        jPropertyValue10 = new javax.swing.JTextField();
        jPropertyName01 = new javax.swing.JLabel();
        jPropertyName02 = new javax.swing.JLabel();
        jPropertyName03 = new javax.swing.JLabel();
        jPropertyName04 = new javax.swing.JLabel();
        jPropertyName05 = new javax.swing.JLabel();
        jPropertyName06 = new javax.swing.JLabel();
        jPropertyName07 = new javax.swing.JLabel();
        jPropertyName08 = new javax.swing.JLabel();
        jPropertyName09 = new javax.swing.JLabel();
        jPropertyName10 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });

        jLabel1.setText("Data Type");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "XML", "Base64", "URL Decode", "gzip", "body parameter", "url parameter", "header flag", "cookie", "hex to bin", "bin to hex", "XOR", "OR", "AND", "identity" }));
        jComboBox1.setEnabled(false);

        jButton1.setText("Add Node");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jLabel2.setText("Edit node properties:");

        jButton2.setText("Delete Node");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPropertyValue01.setEnabled(false);

        jPropertyValue02.setEnabled(false);

        jPropertyValue03.setEnabled(false);

        jPropertyValue04.setEnabled(false);

        jPropertyValue05.setEnabled(false);

        jPropertyValue06.setEnabled(false);

        jPropertyValue07.setEnabled(false);

        jPropertyValue08.setEnabled(false);

        jPropertyValue09.setEnabled(false);

        jPropertyValue10.setEnabled(false);

        jPropertyName01.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jPropertyName01.setText("property:");
        jPropertyName01.setEnabled(false);

        jPropertyName02.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jPropertyName02.setText("property:");
        jPropertyName02.setEnabled(false);

        jPropertyName03.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jPropertyName03.setText("property:");
        jPropertyName03.setEnabled(false);

        jPropertyName04.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jPropertyName04.setText("property:");
        jPropertyName04.setEnabled(false);

        jPropertyName05.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jPropertyName05.setText("property:");
        jPropertyName05.setEnabled(false);

        jPropertyName06.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jPropertyName06.setText("property:");
        jPropertyName06.setEnabled(false);

        jPropertyName07.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jPropertyName07.setText("property:");
        jPropertyName07.setEnabled(false);

        jPropertyName08.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jPropertyName08.setText("property:");
        jPropertyName08.setEnabled(false);

        jPropertyName09.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jPropertyName09.setText("property:");
        jPropertyName09.setEnabled(false);

        jPropertyName10.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jPropertyName10.setText("property:");
        jPropertyName10.setToolTipText("");
        jPropertyName10.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(jLabel2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPropertyName01, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(jPropertyName02, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPropertyName03, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPropertyName04, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPropertyName05, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPropertyName06, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPropertyName07, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPropertyName08, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPropertyName09, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPropertyName10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPropertyValue09)
                            .addComponent(jPropertyValue01, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                            .addComponent(jPropertyValue02)
                            .addComponent(jPropertyValue03)
                            .addComponent(jPropertyValue04)
                            .addComponent(jPropertyValue05)
                            .addComponent(jPropertyValue06)
                            .addComponent(jPropertyValue07)
                            .addComponent(jPropertyValue08)
                            .addComponent(jPropertyValue10))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPropertyValue01, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPropertyName01))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPropertyValue02, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPropertyName02))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPropertyValue03, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPropertyName03))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPropertyValue04, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPropertyName04))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPropertyValue05, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPropertyName05))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPropertyValue06, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPropertyName06))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPropertyValue07, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPropertyName07))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPropertyValue08, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPropertyName08))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPropertyValue09, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPropertyName09))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPropertyValue10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPropertyName10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Long Tab Names");
        jCheckBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jButton3.setText("Export Settings...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportSettingsAction(evt);
            }
        });

        jButton4.setText("Import Settings...");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importSettingsAction(evt);
            }
        });

        jButton5.setText("Reset All Nodes");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllNodesEvent(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                                .addComponent(jCheckBox1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jCheckBox1)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)jTree1.getLastSelectedPathComponent();
        
        //Object node = jTree1.getLastSelectedPathComponent();
        if (node == null){
            //Nothing is selected.     
            jComboBox1.setEnabled(false);
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
            for(int i = 0; i < JPropertyValue.length; ++i ) {
                JPropertyValue[i].setText("");
                JPropertyName[i].setText("Property:");
                JPropertyName[i].setEnabled(false);
                JPropertyValue[i].setEnabled(false);
                JPropertyName[i].setVisible(false);
                JPropertyValue[i].setVisible(false);
            } 
            return;
        }else {
            jComboBox1.setEnabled(true);
            jButton1.setEnabled(true);
            if (!(node.isRoot()) && !(((DefaultMutableTreeNode)node.getParent()).isRoot())) {
                jButton2.setEnabled(true);
                //queryNode qNode = (queryNode)jTree1.getLastSelectedPathComponent();
                //jTextField1.setText(qNode.getSetting());
                Object nodeInfo = node.getUserObject();
                queryNode nodeObject = (queryNode)nodeInfo;
                for(int i = 0; i < JPropertyValue.length; ++i ) {
                    JPropertyValue[i].setText(nodeObject.getSetting(i));
                    JPropertyName[i].setText(nodeObject.getSettingName(i));
                    if(nodeObject.getSettingsNumber() <= i) {
                        JPropertyName[i].setEnabled(false);
                        JPropertyValue[i].setEnabled(false);
                        JPropertyName[i].setVisible(false);
                        JPropertyValue[i].setVisible(false);
                    }else {
                        JPropertyName[i].setEnabled(true);
                        JPropertyValue[i].setEnabled(true);
                        JPropertyName[i].setVisible(true);
                        JPropertyValue[i].setVisible(true);
                    }
                }                
            }else {
                jButton2.setEnabled(false);
                for(int i = 0; i < JPropertyValue.length; ++i ) {
                    JPropertyValue[i].setText("");
                    JPropertyName[i].setText("Property:");
                    JPropertyName[i].setEnabled(false);
                    JPropertyValue[i].setEnabled(false);
                    JPropertyName[i].setVisible(false);
                    JPropertyValue[i].setVisible(false);
                } 
            }
        }
    }//GEN-LAST:event_jTree1ValueChanged

    private int recursiveNodeCount(DefaultMutableTreeNode node) {
        int count = 0;
        for(int i = 0; i < node.getChildCount() ; ++i) {
            count += recursiveNodeCount((DefaultMutableTreeNode)node.getChildAt(i)) + 1;
        }
        return count;
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Add a new node here
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)jTree1.getLastSelectedPathComponent();
        queryNode parentNode = (queryNode)node.getUserObject();
        
        DefaultMutableTreeNode treeNodeToAdd; 
        String selectedType = jComboBox1.getSelectedItem().toString();
        for(int i = 0; i < Globals.nodes.length; ++i) {
            if(0 == selectedType.compareTo(Globals.nodes[i].name)) {
                try {
                    Constructor<?> cons = Globals.nodes[i].getClass().getConstructor(queryNode.class);
                    treeNodeToAdd = new DefaultMutableTreeNode(cons.newInstance(parentNode));
                    node.add(treeNodeToAdd);
                    parentNode.setAsNonLeafNode();
                    jTree1.expandPath(jTree1.getSelectionPath());
                    jTree1.updateUI(); //update first otherwise the row count is going to be messed up
                    jTree1.setSelectionRow((jTree1.getSelectionRows())[0] + recursiveNodeCount(node));
                    jTree1.updateUI();
                } catch (NoSuchMethodException | SecurityException | 
                        InstantiationException | IllegalAccessException | 
                        IllegalArgumentException | InvocationTargetException ex) {
                    Globals.callbacks.printError(ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void recursiveNodeRemoval(DefaultMutableTreeNode node) {
        for(int i = node.getChildCount() - 1; i >= 0 ; --i) {
            recursiveNodeRemoval((DefaultMutableTreeNode)node.getChildAt(i));
        }
        ((queryNode)node.getUserObject()).close();
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //remove a node here
        int rowNumber = (jTree1.getSelectionRows())[0]-1;
        DefaultMutableTreeNode nodeToRemove = (DefaultMutableTreeNode)jTree1.getLastSelectedPathComponent();
        DefaultMutableTreeNode parent = (DefaultMutableTreeNode)nodeToRemove.getParent();
        if(parent != null) {
            recursiveNodeRemoval(nodeToRemove);   
            parent.remove(nodeToRemove);
            if((parent.getChildCount() == 0) && !(((DefaultMutableTreeNode)parent.getParent()).isRoot())) { //parent is now a leaf node, we should have a message editor tab for that unless it's directly a root node child
                queryNode parentNode = (queryNode)parent.getUserObject();
                parentNode.setAsLeafNode();               
            } else {
                queryNode parentNode = (queryNode)parent.getUserObject();
                parentNode.setAsNonLeafNode();
            }
        }
        jTree1.setSelectionRow(rowNumber);
        jTree1.updateUI();
        jTree1ValueChanged(null);
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void jCheckBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox1ItemStateChanged
        Globals.longNames = jCheckBox1.isSelected();
    }//GEN-LAST:event_jCheckBox1ItemStateChanged

    private void recursiveNodeSave(DefaultMutableTreeNode parentTreeNode, Element parentXmlNode, Document doc) {
        for(int i = 0; i < parentTreeNode.getChildCount() ; ++i) {
            Element xmlNode = doc.createElement("node");
            Attr attrNode = doc.createAttribute("type");
            DefaultMutableTreeNode tmpNode = (DefaultMutableTreeNode)(parentTreeNode.getChildAt(i));
            queryNode tmpQueryNode = (queryNode)(tmpNode.getUserObject()); 
            attrNode.setValue(tmpQueryNode.name);
            xmlNode.setAttributeNode(attrNode);
            
            for(int j = 0; j < tmpQueryNode.getSettingsNumber(); j++) {
                attrNode = doc.createAttribute("param"+j);
                attrNode.setValue(tmpQueryNode.getSetting(j));
                xmlNode.setAttributeNode(attrNode);
            }
            
            parentXmlNode.appendChild(xmlNode);
            
            recursiveNodeSave(tmpNode, xmlNode, doc);
        }
    }
    
    private String getSaveString() {
        String xmldata;
        try { //copy payload to XML structure and rewrite xml to the query
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.newDocument();//parse(is);

            Element fileSaveNode = doc.createElement("filesave");
            doc.appendChild(fileSaveNode);

            //global settings
            Element longNamesNode = doc.createElement("longNames");
            longNamesNode.appendChild(doc.createTextNode(Globals.longNames ? "true" : "false"));
            fileSaveNode.appendChild(longNamesNode);

            //node save

            //Root node
            Element rootNode = doc.createElement("root");
            Attr attr = doc.createAttribute("name");
            attr.setValue(jTree1.getModel().getRoot().toString());
            rootNode.setAttributeNode(attr);
            fileSaveNode.appendChild(rootNode);

            //header node
            Element headerNode = doc.createElement("headerNode");
            Attr attrHeaderNode = doc.createAttribute("type");
            DefaultMutableTreeNode tmpDefaultNode = (DefaultMutableTreeNode)(jTree1.getModel().getChild(jTree1.getModel().getRoot(), 0));
            queryNode tmpNode = (queryNode)(tmpDefaultNode.getUserObject()); 
            attrHeaderNode.setValue(tmpNode.name);
            headerNode.setAttributeNode(attrHeaderNode);
            rootNode.appendChild(headerNode);

            //recursively explore child nodes of this 
            recursiveNodeSave(tmpDefaultNode, headerNode, doc);

            //body node
            Element bodyNode = doc.createElement("bodyNode");
            Attr attrBodyNode = doc.createAttribute("type");
            tmpDefaultNode = (DefaultMutableTreeNode)(jTree1.getModel().getChild(jTree1.getModel().getRoot(), 1));
            tmpNode = (queryNode)(tmpDefaultNode.getUserObject());  
            attrBodyNode.setValue(tmpNode.name);
            bodyNode.setAttributeNode(attrBodyNode);
            rootNode.appendChild(bodyNode);

            //recursively explore child nodes of this 
            recursiveNodeSave(tmpDefaultNode, bodyNode, doc);

            //transform all that XML goodness to text
            TransformerFactory tf = TransformerFactory.newInstance();
            Transformer transformer = tf.newTransformer();
            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            StringWriter writer = new StringWriter();
            transformer.transform(new DOMSource(doc), new StreamResult(writer));
            xmldata = writer.getBuffer().toString();
        } catch (IllegalArgumentException | ParserConfigurationException | TransformerException | DOMException e) {
            Globals.callbacks.printError("XML packing error: ");
            Globals.callbacks.printError(e.getMessage());
            xmldata = "failed to output xml";
        }
        return xmldata;
    }
    
    private void exportSettingsAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportSettingsAction
        javax.swing.JFileChooser fileChooser;
        fileChooser = new javax.swing.JFileChooser((File)null);
        fileChooser.setApproveButtonText("Save");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("XML File", "xml", "txt");
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showSaveDialog(jButton3.getParent());
        if(returnVal == JFileChooser.APPROVE_OPTION) {
           File f = fileChooser.getSelectedFile();
           if(f.exists() == false) {
               try {
                   f.createNewFile();
               } catch (IOException ex) {
                   Globals.callbacks.printError(ex.getMessage());
               }
           }
           BufferedWriter out; 
            try {
                out = new BufferedWriter(new FileWriter(f));
                String xmldata = getSaveString();
                out.write(xmldata);
                out.close();
                
            } catch (IOException ex) {
                Globals.callbacks.printError(ex.getMessage());
            }
        }
    }//GEN-LAST:event_exportSettingsAction

    private DefaultMutableTreeNode addNewNode(String nodeType, DefaultMutableTreeNode parentTreeNode) {
        DefaultMutableTreeNode node = parentTreeNode;
        queryNode parentNode = null;
        if(parentTreeNode.isRoot() == false) {
            parentNode = (queryNode)node.getUserObject();        
        }
        
        DefaultMutableTreeNode treeNodeToAdd; 
        
        for(int i = 0; i < Globals.nodes.length; ++i) {
            if(0 == nodeType.compareTo(Globals.nodes[i].name)) {
                try {
                    Constructor<?> cons = Globals.nodes[i].getClass().getConstructor(queryNode.class);
                    treeNodeToAdd = new DefaultMutableTreeNode(cons.newInstance(parentNode));
                    node.add(treeNodeToAdd);
                    if(parentNode != null) {
                        parentNode.setAsNonLeafNode();
                    }
                    return treeNodeToAdd;
                } catch (NoSuchMethodException | SecurityException | 
                        InstantiationException | IllegalAccessException | 
                        IllegalArgumentException | InvocationTargetException ex) {
                    Globals.callbacks.printError(ex.getMessage());
                }
            }
        }
        return null;
    }
    
    private void recursiveNodeAdd(DefaultMutableTreeNode currentTreeNode, Node currentNode) throws ClassNotFoundException {
        NodeList list = currentNode.getChildNodes();
        for(int i = 0; i < list.getLength(); ++i) {
            String type = list.item(i).getAttributes().getNamedItem("type").getTextContent();
            DefaultMutableTreeNode newNode = addNewNode(type, currentTreeNode);
            if(newNode == null) {
                throw new ClassNotFoundException("Unknown node type found in settings/save : " + type);
            }
            queryNode newQueryNode = (queryNode)(newNode.getUserObject());
            //add all params
            NamedNodeMap map = list.item(i).getAttributes();
            for (int j = 0; j < newQueryNode.getSettingsNumber(); ++j) {
                Node paramNode= map.getNamedItem("param"+j);
                if(paramNode != null) {
                    newQueryNode.setSetting(paramNode.getTextContent(), j);
                }
            }
            recursiveNodeAdd(newNode, list.item(i));
        }
    }
    
    private void resetAllNodes() {
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode)(jTree1.getModel().getRoot());
        if(rootNode != null) {
            for (int i = rootNode.getChildCount() - 1; i >= 0; --i) {
                DefaultMutableTreeNode nodeToRemove = (DefaultMutableTreeNode)(rootNode.getChildAt(i));
                recursiveNodeRemoval(nodeToRemove);   
                rootNode.remove(nodeToRemove);
            }
        }
        initData();
    }
    
    private void loadFromString(String config) {
        InputStream is;
        is = new ByteArrayInputStream(config.getBytes());
        try{
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(is);
            doc.getDocumentElement().normalize();
            NodeList nList = doc.getElementsByTagName("longNames");
            if(nList.getLength() > 0){
                Globals.longNames = nList.item(0).getTextContent().compareTo("true") == 0;
                jCheckBox1.setSelected(Globals.longNames);
            }

            //since we're about to load new nodes, we have to remove all the old ones cleanly
            DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode)(jTree1.getModel().getRoot());
            for (int i = 0; i < rootNode.getChildCount(); ++i) {
                DefaultMutableTreeNode nodeToRemove = (DefaultMutableTreeNode)(rootNode.getChildAt(i));
                recursiveNodeRemoval(nodeToRemove);   
                rootNode.remove(nodeToRemove);
            }       

            //now onto loading all the new nodes
            DefaultMutableTreeNode rootTreeNode;
            nList = doc.getElementsByTagName("root");
            if(nList.getLength() > 0){
                String rootNodeName = nList.item(0).getAttributes().getNamedItem("name").getTextContent();
                rootTreeNode = new DefaultMutableTreeNode(rootNodeName);
                jTree1.setModel(new javax.swing.tree.DefaultTreeModel(rootTreeNode));

                NodeList list = nList.item(0).getChildNodes();

                for(int i = 0; i < list.getLength(); ++i) {
                    DefaultMutableTreeNode newNode = addNewNode(list.item(i).getAttributes().getNamedItem("type").getTextContent(), rootTreeNode);
                    if(newNode == null) {
                        throw new ClassNotFoundException("Unknown node type found in settings/save : " + list.item(i).getAttributes().getNamedItem("type").getTextContent());
                    }
                    recursiveNodeAdd(newNode, list.item(i));   
                }

                //lets expand the tree to show all this new loaded goodness
                int prevRowCount;//
                int newRowCount;
                do {
                    prevRowCount = jTree1.getRowCount();
                    for(int i = prevRowCount - 1; i >= 0; --i) {
                        jTree1.expandRow(i);
                    }
                    jTree1.updateUI();
                    newRowCount = jTree1.getRowCount();    
                }while(prevRowCount < newRowCount);

            }
        } catch (IOException | ParserConfigurationException | DOMException | SAXException e) {
            Globals.callbacks.printError(e.getMessage());
        } catch (ClassNotFoundException e) {
            Globals.callbacks.printError(e.getMessage());
            //since we're about to load new nodes, we have to remove all the old ones cleanly
            resetAllNodes();
            Globals.callbacks.printError("The save format might have changed. We recovered from this error, if you were loading settings");
            Globals.callbacks.printError("from a file you can probably edit the saved file to make it match the new save format.");
        }
    }
    
    private void importSettingsAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importSettingsAction
        javax.swing.JFileChooser fileChooser;
        fileChooser = new javax.swing.JFileChooser((File)null);
        fileChooser.setApproveButtonText("Load");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("XML File", "xml", "txt");
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(jButton4.getParent());
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            BufferedReader reader;
            String line;
            StringBuilder sb = new StringBuilder();
            try {
                reader = new BufferedReader(new FileReader(f));
                while ((line = reader.readLine()) != null) {
                    sb.append(line).append("\n");
                }
                reader.close();
            } catch (FileNotFoundException ex) {
                Globals.callbacks.printError(ex.getMessage());
            } catch (IOException ex) {
                Globals.callbacks.printError(ex.getMessage());
            }
            
            String fromFile = sb.toString();
            loadFromString(fromFile);
        } 
    }//GEN-LAST:event_importSettingsAction

    private void recursiveNodeUpdateTabNames(DefaultMutableTreeNode parentTreeNode) {
        for(int i = 0; i < parentTreeNode.getChildCount() ; ++i) {
            DefaultMutableTreeNode tmpNode = (DefaultMutableTreeNode)(parentTreeNode.getChildAt(i));
            queryNode tmpQueryNode = (queryNode)(tmpNode.getUserObject()); 
            tmpQueryNode.refreshTabNAme();
            recursiveNodeUpdateTabNames(tmpNode);
        }
    }
    
    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        //update tab names here (only once)
        DefaultMutableTreeNode tmpDefaultNode = (DefaultMutableTreeNode)(jTree1.getModel().getChild(jTree1.getModel().getRoot(), 0));
        recursiveNodeUpdateTabNames(tmpDefaultNode);
        tmpDefaultNode = (DefaultMutableTreeNode)(jTree1.getModel().getChild(jTree1.getModel().getRoot(), 1));
        recursiveNodeUpdateTabNames(tmpDefaultNode);
        saveToProjectSettings();
    }//GEN-LAST:event_formComponentHidden

    private void resetAllNodesEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetAllNodesEvent
        //summon a OK/cancel box
        int result = JOptionPane.showConfirmDialog((Component) null, "Do you really want to remove all nodes?\n(you may want to export your current settings before you do so)",
        "alert", JOptionPane.OK_CANCEL_OPTION);
        if (result == 0) {
            resetAllNodes();
        }
    }//GEN-LAST:event_resetAllNodesEvent

    private void saveToProjectSettings() {
        Globals.callbacks.saveExtensionSetting("ExtractorExtensionSettings", getSaveString());
    }
    
    public void loadFromProjectSettings() {
        String settings = Globals.callbacks.loadExtensionSetting("ExtractorExtensionSettings");
        if((settings != null) && (settings.isEmpty() == false)) {
            loadFromString(settings);
            //if we're here we should actually save again because from burp's 
            //point of view if you've loaded the settings it should remove it 
            //(duh !?)
            saveToProjectSettings();
        } else {
            initData();
        }
    }
    
    private void updateNode(){
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)jTree1.getLastSelectedPathComponent();
        Object nodeInfo = node.getUserObject();
        queryNode nodeObject = (queryNode)nodeInfo;
        for(int i = 0; i < JPropertyValue.length; ++i) {
            nodeObject.setSetting(JPropertyValue[i].getText(), i);
        }
        jTree1.updateUI();
    }
    
    private void initData() {
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Request/Response top level");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode(new QueryNodeRequestHeaders(null));
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode(new QueryNodeRequestBody(null));
        treeNode1.add(treeNode2);
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        
        jTree1.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel jPropertyName01;
    private javax.swing.JLabel jPropertyName02;
    private javax.swing.JLabel jPropertyName03;
    private javax.swing.JLabel jPropertyName04;
    private javax.swing.JLabel jPropertyName05;
    private javax.swing.JLabel jPropertyName06;
    private javax.swing.JLabel jPropertyName07;
    private javax.swing.JLabel jPropertyName08;
    private javax.swing.JLabel jPropertyName09;
    private javax.swing.JLabel jPropertyName10;
    private javax.swing.JTextField jPropertyValue01;
    private javax.swing.JTextField jPropertyValue02;
    private javax.swing.JTextField jPropertyValue03;
    private javax.swing.JTextField jPropertyValue04;
    private javax.swing.JTextField jPropertyValue05;
    private javax.swing.JTextField jPropertyValue06;
    private javax.swing.JTextField jPropertyValue07;
    private javax.swing.JTextField jPropertyValue08;
    private javax.swing.JTextField jPropertyValue09;
    private javax.swing.JTextField jPropertyValue10;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
